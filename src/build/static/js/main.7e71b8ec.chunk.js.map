{"version":3,"sources":["logo.svg","pages/HomePage.js","pages/AboutPage.js","components/ArticlesList.js","components/CommentsList.js","components/UpvoteSection.js","components/AddCommentsForm.js","pages/NotFoundPage.js","pages/article-content.js","pages/ArticlePage.js","pages/ArticlesListPage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","AboutPage","ArticlesList","articles","map","article","key","className","to","name","title","content","substring","CommentsList","comments","comment","username","text","UpvoteSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","NotFoundPage","ArticlePage","match","params","articleContent","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","AddCommentsForm","ArticlesListPage","NavBar","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e71b8ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst HomePage = ()=>(\n    <>\n    <h1>Hello Welcome to my blog!</h1>\n    <p>This is my fifth website. Don't judge me based on the website. I am work in progress! This is my second website using node.js. The first one was a disaster. You can read more about it in my article about my experience in node.js. I am really excited about this website since its the first time I am using React for developing the front end of a website. So far the experience has been good and I am sure with more practice and developing I can get good at it.</p>\n    <p>Till a year ago, all I was doing was projects in data science. Since the covid pandemic began, I have been trying to learn software development. So this is my journey in learning full stack development and developing cool websites and products. I am sure its going to be a blast!</p>\n    </>\n);\nexport default HomePage;","import React from 'react';\n\nconst AboutPage = ()=>(\n    <>\n    <h1>About me</h1>\n    <p>I am Meghna Kurup. I love coding and have a thirst for learning new things. This is my blog through which I am going to share  my experiences, likes and dislikes. This blog was created by me using node.js for the back-end, react for the front-end and mongo-db for the database. The blog is work in progress and hopefully I can turn it to something exciting. </p>\n    <p>As a person I am quite shy but once I get to know someone very well, I can be the goofiest person you know. When it comes to my working style I would like to believe that I am very sincere and work my best especially under pressure. Being under pressure is frustrating but it kinda gives me a thrill. </p>\n    <p>In my free time, I love watching youtube videos on anything and everything. I like painting though I am not good at it. I think one can enjoy something even though they are not good at it. I like stitching too. I hope that doesn't make me sound like a granny! Volunteering is something I enjoy even though I am someone who is basically shy. It goves me a chance to serve people and it is a very satisfying experience. Most of all, I love learning new things. I believe I am destined to do great things. If not now then soon. It takes time but I am working towards it. Like I mentioned somewhere in this blog, I am work in progress!</p>\n    </>\n);\nexport default AboutPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArticlesList = ({ articles }) => (\n    <>\n    {articles.map((article, key) => (\n        <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\n            <h3>{article.title}</h3>\n            <p>{article.content[0].substring(0, 150)}...</p>\n        </Link>\n    ))}\n    </>\n);\n\nexport default ArticlesList;","import React from 'react';\n\nconst CommentsList = ({comments}) => (\n    <>\n    <h3>Comments:</h3>\n    {\n        comments.map((comment,key) => (\n            <div className=\"comment\" key = {key}>\n                <h4>{comment.username}</h4>\n                <p>{comment.text}</p>\n            </div>\n        ))\n    }\n    </>\n);\nexport default CommentsList;","import React from 'react';\n\nconst UpvoteSection = ({articleName,upvotes,setArticleInfo}) =>\n{\n    const upvoteArticle = async() =>\n    {\n        const result = await fetch(`/api/articles/${articleName}/upvote`,{\n            method:'post',\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n\n    }\n    return(\n    <div id=\"upvotes-section\">\n    <button onClick={() => upvoteArticle()}>Add Upvote</button>\n    <p>This post has been upvoted {upvotes} times</p>\n    </div>\n);\n}\nexport default UpvoteSection;","import React, { useState } from 'react';\n\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\n            method: 'post',//JSON.stringify turns the json object to a string\n            body: JSON.stringify({ username, text: commentText }),// because we need to pass both these \n            headers: {// when you send a post request to a json body we need to send a header \n                'Content-Type': 'application/json',// the header tells ther server what kind of data we \n            }\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n    return (\n        <div id=\"add-comment-form\">\n            <h3>Add a Comment</h3>\n            <label>\n                Name:\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n            </label>\n            <label>\n                Comment:\n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\n            </label>\n            <button onClick={() => addComment()}>Add Comment</button>\n        </div>\n    );\n}\n\nexport default AddCommentForm;","import React from 'react';\n\nconst NotFoundPage = ()=>(\n    <h1>404: Not Found</h1>\n);\nexport default NotFoundPage;","const articles = [\n    {\n        name: 'learn-react',\n        title: 'My tryst with React',\n        content: [\n            `Welcome! So I thought I would share what I felt while developing in React. This is actually the first website where I have used React and it is the first time I have used React. My experience is going to be based on my previous experience with Front end development using HTML and CSS. I have also worked a bit with AngularJS and by a bit I mean one page.`,\n            `When compared to HTML and CSS I found React was not as simple but this would be because I am very familiear with HTML and CSS. React does use a bit of HTML. When we write in JSX it uses HTML tags for returning elements to the page. I don't remember much of Angular but I remember that I found it difficult to understand it. When compared to AngularJS, React was much more simple and easy to understand.`,\n            `The other good thing I liked about React was it was less hassle compared to HTML. In HTML you have to write div inside div or elements for each page or part. React just makes it very modular and reusable and that was fantastic. You write less code and can reuse code to develop similar components.`,\n            `I think React is worth trying and was simple for someone who only knows HTML and CSS. I think I am going to try using it more and get familiar with it. I should be great and maybe I can use it to make this blog better!`,\n        ]\n    },    {\n        name: 'learn-node',\n        title: 'My experience with node.js',\n        content: [\n            `As stated by the website node.js, it is an asynchronous event-driven JavaScript runtime, Node.js is designed to build scalable network applications. In the following \"hello world\" example, many connections can be handled concurrently. Upon each connection, the callback is fired, but if there is no work to be done, Node.js will sleep.`,\n            `This is in contrast to today's more common concurrency model, in which OS threads are employed. Thread-based networking is relatively inefficient and very difficult to use. Furthermore, users of Node.js are free from worries of dead-locking the process, since there are no locks. Almost no function in Node.js directly performs I/O, so the process never blocks. Because nothing blocks, scalable systems are very reasonable to develop in Node.js.`,\n            `Coming to my experience, first website with node.js was a disaster. I had no idea where to start and what to use. Which framework would be best suited and I had to develop it for an assignment for my database class. Developing that website in node.js was my choice as I wanted to learn using it but the closer I got to my deadline I realised it was very bold of me to choose node.js for development with no background in web developmentand with no time left for learning. I somehow developed a website using HTML, CSS and ExpressJS with a MySQL database. My TA was understanding enough to grade me solely on my database. Though he did deduct point on my presentation but a 90/100 for a website that hangs a lot was a lot more than I had expected.`,\n            `My second website using node.js was and is much better because I am creating it while going through the resources and material provided in a course at LinkedIn Learning. The course was very hands-on. The instructer first showed how to develop the front end, back end, the database, integrating everything and finally deploying the website on AWS. I enjoyed the flow of the course and in general felt that node.js is not all that bad. After this course I am planning to either enhance this website or try developing one of my own. We will see! I am sure node.js has a lot more complex features than the ones used for this website but the course and website was a good start.`,\n        ]\n    },     {\n        name: 'my-thoughts-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `Today is the day I talk about something which scares most people: resumes.\n            Creating a resume can be a daunting task because, well, it's the first step in getting a job. It could be a deal breaker. Your resume needs to be good to atleast get through the first step in getting a call for the first round of interviews by a company and a plain resume will not help. `,\n            `I have had my struggles in creating my resume and I still do struggle with it. Being a fresher it is difficult to list out your talents in a way such that you have achieved something. while creating my resume and while going through other resumes I have felt that you should not shy away from showing yourself off, especially as a fresher. Your resume should sell your work as a person and modesty is not an option.`,\n            `One of the points I was told by a senior was to use STAR which stands for Situation-Task-Action-Result. Describing your projects and work experience using this makes your case more convincing. What the situation, what were your tasks, what did you decide to do and approach it and finally what did you achieve as a result for the project or experience. It shows the recruiter that you can analyze and think clearly in a project or while working.`,\n            `The other thing I have noticed is that it always helps when you quantify your results. How much have you improve the project. I achieved 55% more viewership, I increased the efficiency of the model by 45%. These numbers add value to your achievements and shows that your results were worth something.`,\n            `These have been my experiences with creating a resume. Constant uodating, proof reading and rewriting is something I do on a regular basis and it's still going on. I haven't had a lot of luck with my resume but hoping all my efforts does go to some use and my resume does finally get picked to land my dream job. I hope you had fun reading this article and you can comment on what were your experiences while creating your resume and what you think works best.`\n        ]\n    },  \n];\n\nexport default articles;","import React, { useState, useEffect } from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport CommentsList from '../components/CommentsList';\nimport UpvoteSection from '../components/UpvoteSection';\nimport AddCommentsForm from '../components/AddCommentsForm';\nimport NotFoundPage from './NotFoundPage';\nimport articleContent from './article-content';\n\nconst ArticlePage = ({ match }) => {\n    const name = match.params.name;\n    const article = articleContent.find(article => article.name === name);\n\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            console.log(body);\n            setArticleInfo(body);\n        }\n        fetchData();\n    }, [name]);\n\n    if (!article) return <NotFoundPage />\n\n    const otherArticles = articleContent.filter(article => article.name !== name);\n\n    return (\n        <>\n        <h1>{article.title}</h1>\n        <UpvoteSection articleName={name} upvotes={articleInfo.upvotes} setArticleInfo={setArticleInfo} />\n        {article.content.map((paragraph, key) => (\n            <p key={key}>{paragraph}</p>\n        ))}\n        <CommentsList comments = {articleInfo.comments}/>\n        <AddCommentsForm articleName={name} setArticleInfo={setArticleInfo}/>\n        <h3>Other Articles:</h3>\n        <ArticlesList articles={otherArticles} />\n        </>\n    );\n}\n\nexport default ArticlePage;","import React from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport articleContent from './article-content';\n\nconst ArticlesListPage = () => (\n    <>\n    <h1>Articles</h1>\n    <ArticlesList articles={articleContent} />\n    </>\n);\n\nexport default ArticlesListPage;","import React from 'react';\nimport {Link} from'react-router-dom';\n\nconst NavBar = ()=>(\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n                <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n                <Link to=\"/articles-list\">Articles</Link>\n            </li>\n        </ul>\n    </nav>\n\n);\n export default NavBar;","import React from 'react';\nimport logo from './logo.svg';\nimport HomePage from './pages/HomePage';\nimport AboutPage from'./pages/AboutPage';\nimport ArticlePage from './pages/ArticlePage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\nimport{\n  BrowserRouter as Router,\n  Route,\n  Switch\n}from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <NavBar/>\n      <div id=\"page-body\">\n        <Switch>\n        <Route path=\"/\" component={HomePage} exact/>\n        <Route path=\"/about\" component={AboutPage}  />\n        <Route path=\"/article/:name\" component={ArticlePage}  />\n        <Route path=\"/articles-list\" component={ArticlesListPage}/>\n        <Route component = {NotFoundPage}/>\n        </Switch>\n     </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}